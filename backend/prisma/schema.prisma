// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id 
  email             String            @unique
  password_hash     String
  full_name         String
  phone_number      String?
  profile_picture   String?
  city              String?
  province          String?
  verification_token String?          // Token unik untuk verifikasi email
  verification_token_expires DateTime? // Waktu kedaluwarsa token
  is_email_verified Boolean           @default(false)
  registration_date DateTime          @default(now())
  last_login        DateTime?
  is_active         Boolean           @default(true)
  created_at        DateTime          @default(now())
  updated_at        DateTime?
  user_roles        UserRole[]
  mentor_profile    MentorProfile?
  bookings          Booking[]
  feedback          Feedback[]
  notifications     Notification[]
  user_behavior     UserBehavior[]
  referral_codes    ReferralCode[]
  projects          Project[]
  course_purchases  CoursePurchase[]
  course_progress   CourseProgress[]
  course_reviews    CourseReview[]

  @@map("users")
}

model Role {
  id          Int        @id
  role_name   String     @unique
  description String?
  created_at  DateTime   @default(now())
  user_roles  UserRole[]

  @@map("roles")
}

model UserRole {
  id           Int      @id
  user_id      Int
  role_id      Int
  assigned_date DateTime @default(now())
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id])
  role         Role     @relation(fields: [role_id], references: [id])

  @@map("user_roles")
}

model MentorProfile {
  id                    Int                @id
  user_id               Int                @unique
  expertise             String?
  bio                   String?
  experience            String?
  availability_schedule Json?
  hourly_rate           Decimal?
  is_verified           Boolean            @default(false)
  created_at            DateTime           @default(now())
  updated_at            DateTime?
  user                  User               @relation(fields: [user_id], references: [id])
  mentoring_services    MentoringService[]
  courses               Course[]

  @@map("mentor_profiles")
}

model MentoringService {
  id               Int                @id
  mentor_id        Int
  service_name     String
  description      String?
  price            Decimal
  service_type     String? // 'one-on-one, group, bootcamp'
  max_participants Int?
  duration_days    Int
  is_active        Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime?
  mentor           MentorProfile      @relation(fields: [mentor_id], references: [id])
  sessions         MentoringSession[]

  @@map("mentoring_services")
}

model MentoringSession {
  id              Int              @id
  service_id      Int
  start_time      DateTime
  end_time        DateTime
  duration_minutes Int
  meeting_link    String?
  status          String? // 'scheduled, ongoing, completed, cancelled'
  notes           String?
  created_at      DateTime         @default(now())
  updated_at      DateTime?
  service         MentoringService @relation(fields: [service_id], references: [id])
  bookings        Booking[]
  feedback        Feedback[]
  projects        Project[]

  @@map("mentoring_sessions")
}

model Booking {
  id              Int              @id
  mentee_id       Int
  session_id      Int
  booking_date    DateTime         @default(now())
  status          String? // 'pending, confirmed, cancelled, completed'
  special_requests String?
  created_at      DateTime         @default(now())
  updated_at      DateTime?
  mentee          User             @relation(fields: [mentee_id], references: [id])
  session         MentoringSession @relation(fields: [session_id], references: [id])
  payments        Payment[]

  @@map("bookings")
}

model Payment {
  id                   Int              @id
  booking_id           Int
  amount               Decimal
  payment_date         DateTime?
  payment_method       String? // 'bank_transfer, virtual_account, qris'
  transaction_id       String?
  status               String? // 'pending, completed, failed, refunded'
  created_at           DateTime         @default(now())
  updated_at           DateTime?
  duitku_payment_url   String?
  duitku_payment_token String?
  booking              Booking          @relation(fields: [booking_id], references: [id])
  course_purchases     CoursePurchase[]

  @@map("payments")
}

model Feedback {
  id             Int              @id
  session_id     Int
  user_id        Int
  rating         Int
  comment        String?
  submitted_date DateTime         @default(now())
  created_at     DateTime         @default(now())
  session        MentoringSession @relation(fields: [session_id], references: [id])
  user           User             @relation(fields: [user_id], references: [id])

  @@map("feedback")
}

model Project {
  id              Int              @id
  mentee_id       Int
  session_id      Int
  title           String
  description     String?
  file_path       String?
  submission_date DateTime?        @default(now())
  plagiarism_score Decimal?
  created_at      DateTime         @default(now())
  updated_at      DateTime?
  mentee          User             @relation(fields: [mentee_id], references: [id])
  session         MentoringSession @relation(fields: [session_id], references: [id])

  @@map("projects")
}

model Notification {
  id           Int      @id
  user_id      Int
  type         String
  title        String
  message      String?
  is_read      Boolean  @default(false)
  created_date DateTime @default(now())
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

model ReferralCode {
  id                    Int              @id
  owner_id              Int
  code                  String           @unique
  discount_percentage   Decimal
  commission_percentage Decimal
  created_date          DateTime         @default(now())
  expiry_date           DateTime?
  is_active             Boolean          @default(true)
  created_at            DateTime         @default(now())
  updated_at            DateTime?
  owner                 User             @relation(fields: [owner_id], references: [id])
  course_purchases      CoursePurchase[]

  @@map("referral_codes")
}

model UserBehavior {
  id         Int      @id
  user_id    Int?
  page_visited String
  action     String?
  timestamp  DateTime @default(now())
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())
  user       User?    @relation(fields: [user_id], references: [id])

  @@map("user_behavior")
}

// Tambahan model untuk tabel baru

model Course {
  id              Int              @id
  mentor_id       Int
  title           String
  description     String?
  thumbnail_image String?
  price           Decimal
  level           String?          // 'beginner, intermediate, advanced'
  category        String?
  tags            Json?
  is_active       Boolean          @default(true)
  created_at      DateTime         @default(now())
  updated_at      DateTime?
  mentor          MentorProfile    @relation(fields: [mentor_id], references: [id])
  materials       CourseMaterial[]
  purchases       CoursePurchase[]
  progress        CourseProgress[]
  reviews         CourseReview[]

  @@map("courses")
}

model CourseMaterial {
  id           Int          @id
  course_id    Int
  title        String
  description  String?
  order_number Int
  created_at   DateTime     @default(now())
  updated_at   DateTime?
  course       Course       @relation(fields: [course_id], references: [id])
  files        CourseFile[]
  progress     CourseProgress[]

  @@map("course_materials")
}

model CourseFile {
  id           Int            @id
  material_id  Int
  file_name    String
  file_path    String
  file_type    String         // 'pptx, pdf, word, ipynb, video, etc'
  file_size    Int?
  order_number Int
  created_at   DateTime       @default(now())
  updated_at   DateTime?
  material     CourseMaterial @relation(fields: [material_id], references: [id])

  @@map("course_files")
}

model CoursePurchase {
  id              Int          @id
  user_id         Int
  course_id       Int
  purchase_date   DateTime     @default(now())
  status          String?      // 'pending, completed, cancelled, refunded'
  payment_id      Int?
  referral_code_id Int?
  created_at      DateTime     @default(now())
  updated_at      DateTime?
  user            User         @relation(fields: [user_id], references: [id])
  course          Course       @relation(fields: [course_id], references: [id])
  payment         Payment?     @relation(fields: [payment_id], references: [id])
  referral_code   ReferralCode? @relation(fields: [referral_code_id], references: [id])

  @@map("course_purchases")
}

model CourseProgress {
  id                Int            @id
  user_id           Int
  course_id         Int
  material_id       Int
  is_completed      Boolean        @default(false)
  last_accessed     DateTime?
  time_spent_seconds Int            @default(0)
  created_at        DateTime       @default(now())
  updated_at        DateTime?
  user              User           @relation(fields: [user_id], references: [id])
  course            Course         @relation(fields: [course_id], references: [id])
  material          CourseMaterial @relation(fields: [material_id], references: [id])

  @@map("course_progress")
}

model CourseReview {
  id             Int      @id
  user_id        Int
  course_id      Int
  rating         Int
  comment        String?
  submitted_date DateTime @default(now())
  created_at     DateTime @default(now())
  updated_at     DateTime?
  user           User     @relation(fields: [user_id], references: [id])
  course         Course   @relation(fields: [course_id], references: [id])

  @@map("course_reviews")
}