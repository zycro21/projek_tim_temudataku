// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int                  @id 
  email                       String               @unique
  password_hash               String
  full_name                   String
  phone_number                String?
  profile_picture             String?
  city                        String?
  province                    String?
  is_email_verified           Boolean              @default(false)
  verification_token          String?
  verification_token_expires  DateTime?
  registration_date           DateTime             @default(now())
  last_login                  DateTime?
  is_active                   Boolean              @default(true)
  created_at                  DateTime             @default(now())
  updated_at                  DateTime?
  user_roles                  UserRole[]
  mentor_profile              MentorProfile?
  bookings                    Booking[]
  feedback                    Feedback[]
  notifications               Notification[]
  user_behavior               UserBehavior[]
  referral_codes              ReferralCode[]
  referral_usages             ReferralUsage[]
  projects                    Project[]
  practice_purchases          PracticePurchase[]
  practice_progress           PracticeProgress[]
  practice_reviews            PracticeReview[]
  certificates                Certificate[]
  commission_payments         CommissionPayment[]

  @@map("users")
}

model Role {
  id          Int        @id
  role_name   String     @unique
  description String?
  created_at  DateTime   @default(now())
  user_roles  UserRole[]

  @@map("roles")
}

model UserRole {
  id            Int      @id
  user_id       Int
  role_id       Int
  assigned_date DateTime @default(now())
  created_at    DateTime @default(now())
  user          User     @relation(fields: [user_id], references: [id])
  role          Role     @relation(fields: [role_id], references: [id])

  @@map("user_roles")
}

model MentorProfile {
  id                    Int                @id
  user_id               Int                @unique
  expertise             String?
  bio                   String?
  experience            String?
  availability_schedule Json?
  hourly_rate           Decimal?
  is_verified           Boolean            @default(false)
  created_at            DateTime           @default(now())
  updated_at            DateTime?
  user                  User               @relation(fields: [user_id], references: [id])
  mentoring_services    MentoringService[]
  practices             Practice[]

  @@map("mentor_profiles")
}

model MentoringService {
  id               Int                @id
  mentor_id        Int
  service_name     String
  description      String?
  price            Decimal
  service_type     String?            // 'one-on-one, group, bootcamp, shortclass, live class'
  max_participants Int?
  duration_days    Int
  is_active        Boolean            @default(true)
  created_at       DateTime           @default(now())
  updated_at       DateTime?
  mentor           MentorProfile      @relation(fields: [mentor_id], references: [id])
  sessions         MentoringSession[]
  certificates     Certificate[]

  @@map("mentoring_services")
}

model MentoringSession {
  id               Int              @id
  service_id       Int
  start_time       DateTime
  end_time         DateTime
  duration_minutes Int
  meeting_link     String?
  status           String?          // 'scheduled, ongoing, completed, cancelled'
  notes            String?
  created_at       DateTime         @default(now())
  updated_at       DateTime?
  service          MentoringService @relation(fields: [service_id], references: [id])
  bookings         Booking[]
  feedback         Feedback[]
  projects         Project[]

  @@map("mentoring_sessions")
}

model Booking {
  id                Int              @id
  mentee_id         Int
  session_id        Int
  booking_date      DateTime         @default(now())
  status            String?          // 'pending, confirmed, cancelled, completed'
  special_requests  String?
  referral_usage_id Int?
  created_at        DateTime         @default(now())
  updated_at        DateTime?
  mentee            User             @relation(fields: [mentee_id], references: [id])
  session           MentoringSession @relation(fields: [session_id], references: [id])
  referral_usage    ReferralUsage?   @relation(fields: [referral_usage_id], references: [id])
  payments          Payment[]

  @@map("bookings")
}

model Payment {
  id                   Int                @id
  booking_id           Int
  amount               Decimal
  payment_date         DateTime?
  payment_method       String?            // 'bank_transfer, virtual_account, qris'
  transaction_id       String?
  status               String?            // 'pending, completed, failed, refunded'
  duitku_payment_url   String?
  duitku_payment_token String?
  created_at           DateTime           @default(now())
  updated_at           DateTime?
  booking              Booking            @relation(fields: [booking_id], references: [id])
  practice_purchases   PracticePurchase[]

  @@map("payments")
}

model ReferralCode {
  id                    Int                   @id
  owner_id              Int
  code                  String                @unique
  discount_percentage   Decimal
  commission_percentage Decimal
  created_date          DateTime              @default(now())
  expiry_date           DateTime?
  is_active             Boolean               @default(true)
  created_at            DateTime              @default(now())
  updated_at            DateTime?
  owner                 User                  @relation(fields: [owner_id], references: [id])
  usages                ReferralUsage[]
  commissions           ReferralCommission[]
  commission_payments   CommissionPayment[]

  @@map("referral_codes")
}

model ReferralUsage {
  id               Int           @id
  user_id          Int
  referral_code_id Int
  used_at          DateTime      @default(now())
  context          String?       // 'registration, practice_purchase, mentoring_purchase'
  created_at       DateTime      @default(now())
  updated_at       DateTime?
  user             User          @relation(fields: [user_id], references: [id])
  referral_code    ReferralCode  @relation(fields: [referral_code_id], references: [id])
  bookings         Booking[]
  practice_purchases PracticePurchase[]

  @@map("referral_usages")
}

model ReferralCommission {
  id               Int          @id
  referral_code_id Int
  transaction_id   String
  amount           Decimal
  created_at       DateTime     @default(now())
  referral_code    ReferralCode @relation(fields: [referral_code_id], references: [id])

  @@map("referral_commissions")
}

model CommissionPayment {
  id               Int          @id
  referral_code_id Int
  owner_id         Int
  amount           Decimal
  transaction_id   String?
  status           String?      // 'pending, paid, failed'
  paid_at          DateTime?
  created_at       DateTime     @default(now())
  referral_code    ReferralCode @relation(fields: [referral_code_id], references: [id])
  owner            User         @relation(fields: [owner_id], references: [id])

  @@map("commission_payments")
}

model Feedback {
  id             Int              @id
  session_id     Int
  user_id        Int
  rating         Int
  comment        String?
  submitted_date DateTime         @default(now())
  created_at     DateTime         @default(now())
  session        MentoringSession @relation(fields: [session_id], references: [id])
  user           User             @relation(fields: [user_id], references: [id])

  @@map("feedback")
}

model Project {
  id               Int              @id
  mentee_id        Int
  session_id       Int
  title            String
  description      String?
  file_path        String?
  submission_date  DateTime         @default(now())
  plagiarism_score Decimal?
  nilai            Decimal?
  created_at       DateTime         @default(now())
  updated_at       DateTime?
  mentee           User             @relation(fields: [mentee_id], references: [id])
  session          MentoringSession @relation(fields: [session_id], references: [id])

  @@map("projects")
}

model Notification {
  id           Int      @id
  user_id      Int
  type         String
  title        String
  message      String?
  is_read      Boolean  @default(false)
  created_date DateTime @default(now())
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

model UserBehavior {
  id           Int      @id
  user_id      Int?
  page_visited String
  action       String?
  timestamp    DateTime @default(now())
  ip_address   String?
  user_agent   String?
  created_at   DateTime @default(now())
  user         User?    @relation(fields: [user_id], references: [id])

  @@map("user_behavior")
}

// Renamed from Course to Practice to match DBML

model Practice {
  id              Int                @id
  mentor_id       Int
  title           String
  description     String?
  thumbnail_image String?
  price           Decimal
  practice_type   String?            // 'Data Analyst, Data Scientist, Machine Learning Engineer, NLP Specialist, Other'
  category        String?
  tags            Json?
  is_active       Boolean            @default(true)
  created_at      DateTime           @default(now())
  updated_at      DateTime?
  mentor          MentorProfile      @relation(fields: [mentor_id], references: [id])
  materials       PracticeMaterial[]
  purchases       PracticePurchase[]
  progress        PracticeProgress[]
  reviews         PracticeReview[]

  @@map("practices")
}

model PracticeMaterial {
  id           Int               @id
  practice_id  Int
  title        String
  description  String?
  order_number Int
  created_at   DateTime          @default(now())
  updated_at   DateTime?
  practice     Practice          @relation(fields: [practice_id], references: [id])
  files        PracticeFile[]
  progress     PracticeProgress[]

  @@map("practice_materials")
}

model PracticeFile {
  id           Int              @id
  material_id  Int
  file_name    String
  file_path    String
  file_type    String           // 'pptx, pdf, word, ipynb, video, etc'
  file_size    Int?
  order_number Int
  created_at   DateTime         @default(now())
  updated_at   DateTime?
  material     PracticeMaterial @relation(fields: [material_id], references: [id])

  @@map("practice_files")
}

model PracticePurchase {
  id                Int           @id
  user_id           Int
  practice_id       Int
  purchase_date     DateTime      @default(now())
  status            String?       // 'pending, completed, cancelled, refunded'
  payment_id        Int?
  referral_usage_id Int?
  created_at        DateTime      @default(now())
  updated_at        DateTime?
  user              User          @relation(fields: [user_id], references: [id])
  practice          Practice      @relation(fields: [practice_id], references: [id])
  payment           Payment?      @relation(fields: [payment_id], references: [id])
  referral_usage    ReferralUsage? @relation(fields: [referral_usage_id], references: [id])

  @@map("practice_purchases")
}

model PracticeProgress {
  id                 Int              @id
  user_id            Int
  practice_id        Int
  material_id        Int
  is_completed       Boolean          @default(false)
  last_accessed      DateTime?
  time_spent_seconds Int              @default(0)
  created_at         DateTime         @default(now())
  updated_at         DateTime?
  user               User             @relation(fields: [user_id], references: [id])
  practice           Practice         @relation(fields: [practice_id], references: [id])
  material           PracticeMaterial @relation(fields: [material_id], references: [id])

  @@map("practice_progress")
}

model PracticeReview {
  id             Int       @id
  user_id        Int
  practice_id    Int
  rating         Int
  comment        String?
  submitted_date DateTime  @default(now())
  created_at     DateTime  @default(now())
  updated_at     DateTime?
  user           User      @relation(fields: [user_id], references: [id])
  practice       Practice  @relation(fields: [practice_id], references: [id])

  @@map("practice_reviews")
}

model Certificate {
  id                Int              @id
  mentee_id         Int
  service_id        Int
  certificate_number String           @unique
  issue_date        DateTime         @default(now())
  certificate_path  String?
  projects_data     Json?            // JSON data containing project details and scores for bootcamp certificates
  status            String?          // 'generated, sent, viewed'
  created_at        DateTime         @default(now())
  updated_at        DateTime?
  mentee            User             @relation(fields: [mentee_id], references: [id])
  service           MentoringService @relation(fields: [service_id], references: [id])

  @@map("certificates")
}